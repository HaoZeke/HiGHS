var documenterSearchIndex = {"docs":
[{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"HiGHS can be cloned from GitHub with the command","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"git clone https://github.com/ERGO-Code/HiGHS.git","category":"page"},{"location":"cpp/get-started.html#Building-HiGHS-from-source-code","page":"Get started in C++","title":"Building HiGHS from source code","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"HiGHS uses CMake (minimum version 3.15) as a build system, and can use the following compilers","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"Clang clang\nGNU g++ \nIntel icc","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"The simplest setup is to create a build folder (within the folder into which HiGHS has been downloaded) and then build HiGHS within it. The name of the build folder is arbitrary but, assuming it is HiGHS/build, the full sequence of commands required is as follows","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON ..\ncmake --build . ","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"This creates the executable build/bin/highs.","category":"page"},{"location":"cpp/get-started.html#Test-build","page":"Get started in C++","title":"Test build","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"To perform a quick test to see whether the compilation was successful, run ctest from within the build folder.","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"ctest ","category":"page"},{"location":"cpp/get-started.html#Install","page":"Get started in C++","title":"Install","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"The default installation location may need administrative permissions. To install, after building and testing, run","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"cmake --install . ","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"To install in a specified installation directory run CMake with the CMAKE_INSTALL_PREFIX flag set:","category":"page"},{"location":"cpp/get-started.html","page":"Get started in C++","title":"Get started in C++","text":"cmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path/to/highs_install ..\ncmake --build .\ncmake --install . ","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"The options that control HiGHS are of four types: boolean, integer, double and string. Their values can be specified","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"via the command line when running the executable;\nvia method calls when running HiGHS in an application.","category":"page"},{"location":"options/intro.html#Options-file","page":"Introduction","title":"Options file","text":"","category":"section"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"When running the executable via the command line, some options values can be set explicitly in the command, and all options can be set by means of an options file.","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"A sample options file, giving documentation of all the options is written to the console by the command","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"bin/highs --options_file=\"\"","category":"page"},{"location":"options/intro.html#Option-methods","page":"Introduction","title":"Option methods","text":"","category":"section"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"To set the value of option name, call","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"status = h.setOptionValue(name, value)","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"where the value passed can be an identifier of the appropriate type, or an explicit value. ","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"To get the value of option name, call","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"[status, value] = h.get\"Type\"OptionValue(name)","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"where \"Type\" is \"Bool\", \"Int\", \"Double\" or \"String\", as appropriate.","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"To get the type of option name, call","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"[status, type] = h.getOptionType(name)","category":"page"},{"location":"options/intro.html","page":"Introduction","title":"Introduction","text":"Examples of calls to options methods are given in the examples section.","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"The data members of fundamental classes in HiGHS are defined below. Class data members for internal use only are not documented.","category":"page"},{"location":"python/classes.html#HighsSparseMatrix","page":"Classes","title":"HighsSparseMatrix","text":"","category":"section"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"The constraint matrix of an LP model is communicated via an instance of the HighsSparseMatrix class ","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"format_: Scalar of MatrixFormat type - Format of the matrix\nnum_col_ : Scalar of integer type - Number of columns in the matrix\nnum_row_: Scalar of integer type - Number of rows in the matrix\nstart_: Vector of integer type - Start of each compressed vector in the matrix\nindex_: Vector of integer type - Indices of the nonzeros in the matrix\nvalue_: Vector of double type - Values of the nonzeros in the matrix","category":"page"},{"location":"python/classes.html#HighsLp","page":"Classes","title":"HighsLp","text":"","category":"section"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"An LP model is communicated via an instance of the HighsLp class ","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"num_col_: Scalar of type integer - Number of columns in the model\nnum_row_: Scalar of type integer - Number of rows in the model\ncol_cost_: Vector of type double - Coefficients of the linear term in the objective function\ncol_lower_: Vector of type double - Lower bounds on the variables\ncol_upper_: Vector of type double - Upper bounds on the variables\nrow_lower_: Vector of type double - Lower bounds on the constraints\nrow_upper_: Vector of type double - Upper bounds on the constraints\na_matrix_: Instance of HighsSparseMatrix class - Constraint matrix\nsense_: Scalar of type ObjSense - Optimization sense of the model\noffset_: Scalar of type double - Constant term in the objective function\nmodel_name_: Scalar of type string - Name of the model\nobjective_name_: Scalar of type string - Name of the objective function\ncol_names_: Vector of type string - Names of the variables\nrow_names_: Vector of type string - Names of the constraints\nintegrality_: Vector of type HighsVarType - Type of each variable","category":"page"},{"location":"python/classes.html#HighsSolution","page":"Classes","title":"HighsSolution","text":"","category":"section"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"The solution of a model is communicated via an instance of the HighsSolution class","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"value_valid: Scalar of type bool - Indicates whether the column and row values are valid\ndual_valid: Scalar of type bool - Indicates whether the column and row duals are valid\ncol_value: Vector of type double - Values of the columns (variables)\ncol_dual: Vector of type double - Duals of the columns (variables)\nrow_value: Vector of type double - Values of the rows (constraints)\nrow_dual: Vector of type double - Duals of the rows (constraints)","category":"page"},{"location":"python/classes.html#HighsBasis","page":"Classes","title":"HighsBasis","text":"","category":"section"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"The basis of a model is communicated via an instance of the HighsBasis class","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"valid: Scalar of type bool - Indicates whether the basis is valid\ncol_status: Vector of type HighsBasisStatus - Comparison with HighsBasisStatus gives the basis status of a column\nrow_status: Vector of type HighsBasisStatus - Comparison with HighsBasisStatus gives the basis status of a row","category":"page"},{"location":"python/classes.html#HighsInfo","page":"Classes","title":"HighsInfo","text":"","category":"section"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"Scalar information about a solved model is communicated via an instance of the HighsInfo class","category":"page"},{"location":"python/classes.html","page":"Classes","title":"Classes","text":"valid: Scalar of type bool - Indicates whether the values in a HighsInfo instance are valid\nmip_node_count: Scalar of type int64_t - The number of nodes generated by the MIP solver\nsimplex_iteration_count: Scalar of type integer - The number of simplex iterations performed\nipm_iteration_count: Scalar of type integer - The number of interior point iterations performed\ncrossover_iteration_count: Scalar of type integer - The number of crossover iterations performed\nqp_iteration_count: Scalar of type integer - The number of QP iterations performed\nprimal_solution_status: Scalar of type integer - Comparison with SolutionStatus gives the status of the primal solution\ndual_solution_status: Scalar of type integer - Comparison with SolutionStatus gives the status of the dual solution\nbasis_validity: Scalar of type integer - Comparison with BasisValidity gives the status of any basis information\nobjective_function_value: Scalar of type double - The optimal value of the objective function\nmip_dual_bound: Scalar of type double - The dual bound for the MIP solver\nmip_gap: Scalar of type double - The absolute value of the gap between the primal and bounds, relative to the primal bound.\nmax_integrality_violation: Scalar of type double - The maximum deviation from an integer value over all the discrete variables\nnum_primal_infeasibilities: Scalar of type integer - The number of variables violating a bound by more than the primal feasibility tolerance.\nmax_primal_infeasibility: Scalar of type double - The maximum violation of a bound on a variable\nsum_primal_infeasibilities: Scalar of type double - The sum of violations of bounds by variables\nnum_dual_infeasibilities: Scalar of type integer - The number of variables violating dual feasibility by more than the dual feasibility tolerance.\nmax_dual_infeasibility: Scalar of type double - The maximum dual feasibility violation\nsum_dual_infeasibilities: Scalar of type double - The sum of dual feasibility violations","category":"page"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Any linear optimization model will have decision variables, a linear or quadratic objective function, and linear constraints and bounds on the values of the decision variables. A mixed-integer optimization model will require some or all of the decision variables to take integer values. The model may require the objective function to be maximized or minimized whilst satisfying the constraints and bounds. By default, HiGHS minimizes the objective function.","category":"page"},{"location":"terminology.html#Bounds-and-the-objective-function","page":"Terminology","title":"Bounds and the objective function","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"The bounds on a decision variable are the least and greatest values that it may take, and infinite bounds can be specified. A linear objective function is given by a set of coefficients, one for each decision variable, and its value is the sum of products of coefficients and values of decision variables. The objective coefficients are often referred to as costs, and some may be zero. When a model has been solved, the optimal values of the decision variables are referred to as the (primal) solution.","category":"page"},{"location":"terminology.html#Constraints-and-the-feasible-region","page":"Terminology","title":"Constraints and the feasible region","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Linear constraints require linear functions of decision variables to lie between bounds, and infinite bounds can be specified. If the bounds are equal, then the constraint is an equation. If the bounds are both finite, then the constraint is said to be boxed or two-sided. The set of points satisfying linear constraints and bounds is known as the feasible region. Geometrically, this is a multi-dimensional convex polyhedron, whose extreme points are referred to as vertices.","category":"page"},{"location":"terminology.html#The-constraint-matrix","page":"Terminology","title":"The constraint matrix","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"The coefficients of the linear constraints are naturally viewed as rows of a matrix. The constraint coefficients associated with a particular decision variable form a column of the constraint matrix. Hence constraints are sometimes referred to as rows, and decision variables as columns. Constraint matrix coefficients may be zero. Indeed, for large practical models it is typical for most of the coefficients to be zero. When this property can be exploited to computational advantage, the matrix is said to be sparse. When the constraint matrix is not sparse, the solution of large models is normally intractable computationally.","category":"page"},{"location":"terminology.html#Optimization-outcomes","page":"Terminology","title":"Optimization outcomes","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"It is possible to define a set of constraints and bounds that cannot be satisfied, in which case the model is said to be infeasible. Conversely, it is possible that the value of the objective function can be improved without bound whilst satisfying the constraints and bounds, in which case the model is said to be unbounded. If a model is neither infeasible, nor unbounded, it has an optimal solution. The optimal objective function value for a linear optimization model may be achieved at more than point, in which case the optimal solution is said to be non-unique.","category":"page"},{"location":"terminology.html#Primal-values","page":"Terminology","title":"Primal values","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"The values of the decision variables are referred to as primal values to distingush them from dual values.","category":"page"},{"location":"terminology.html#Dual-values","page":"Terminology","title":"Dual values","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"When none of the decision variables is required to take integer values, the model is said to be continuous. For continuous models, each variable and constraint has an associated dual variable. The values of the dual variables constitute the dual solution, and it is for this reason that the term primal solution is used to distinguish the optimal values of the decision variables. At the optimal solution of a continuous model, some of the decision variables and values of constraint functions will be equal to their lower or upper bounds. Such a bound is said to be active. If a variable or constraint is at a bound, its corresponding dual solution value will generally be non-zero: when at a lower bound the dual value will be non-negative; when at an upper bound the dual value will be non-positive. When maximizing the objective the required signs of the dual values are reversed. Due to their economic interpretation, the dual values associated with constraints are often referred to as shadow prices or fair prices. Mathematically, the dual values associated with variables are often referred to as reduced costs, and the dual values associated with constraints are often referred to as Lagrange multipliers.","category":"page"},{"location":"terminology.html#Basic-solution","page":"Terminology","title":"Basic solution","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"An LP model that is neither infeasible, nor unbounded, has an optimal solution at a vertex. At a vertex, the decision variables can be partitioned into as many basic variables as there are constraints, and nonbasic variables. Such a solution is known as a basic solution, and the partition referred to as a basis.","category":"page"},{"location":"terminology.html#Sensitivity","page":"Terminology","title":"Sensitivity","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Analysis of the change in optimal objective value of a continuous linear optimization model as the cost coefficients and bounds are changed is referred to in HiGHS as ranging. For an active bound, the corresponding dual value gives the change in the objective if that bound is increased or decreased. This level of analysis is often referred to as sensitivity. In general, the change in the objective is only known for a limited range of values for the active bound. HiGHS will return the limits of these bound ranges ranges, the objective value at both limits and the index of a variable or constraint that will acquire an active bound at both limits. For each variable with an active bound, the solution will remain optimal for a range of values of its cost coefficient. HiGHS will return the values of these cost ranges. For a variable or constraint whose value is not at a bound, HiGHS will return the range of values that the variable or constraint can take, the objective values at the limits of the range, and the index of a variable or constraint with a bound that will become in active at both limits.","category":"page"},{"location":"terminology.html#MIP","page":"Terminology","title":"MIP","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"When solving a MIP, some or all the variables must take discrete values. In HiGHS there are three types of discrete variables.","category":"page"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Integer: those that must take integer values between their bounds\nSemi-continuous: those that must be zero or take continuous values between their bounds\nSemi-integer: those that must be zero or take integer values between their bounds","category":"page"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"In the following discussion, for ease of reference to relative objective values, it is assumed that the objective is being minimized","category":"page"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Any point for which the discrete variables satisfy their requirements, is said to be integer feasible. The objective value at such a point is an upper bound on the optimal objective value. The least such bound is known as the primal bound. The MIP solver generates a sequence of LP problems, each of which has bounds on the variables that are tighter than those of the original problem. When unsolved, there is a bound on the optimal objective value for each such LP and, the greatest such bound is known as the dual bound. The optimal objective value of the MIP cannot be less than the dual bound. Hence the gap between the primal and dual bounds is a measure of progress of the MIP solver. Although the absolute gap is of some interest, the gap relative to the primal bound is a better measure. When the gap reaches zero then the MIP is solved to optimality. However, it is often preferable to stop the MIP solver when the relative gap is below a specified tolerance.","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"There are HiGHS interfaces for C, C#, FORTRAN, Julia and Python in HiGHS/interfaces, with example driver files in HiGHS/examples. ","category":"page"},{"location":"interfaces.html#Python","page":"Interfaces","title":"Python","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"For Python, see the Get Started in Python section.","category":"page"},{"location":"interfaces.html#Julia","page":"Interfaces","title":"Julia","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"A Julia interface is available at HiGHS.jl. It can be used via JuMP, see Getting started with JuMP.","category":"page"},{"location":"interfaces.html#Fortran","page":"Interfaces","title":"Fortran","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"The interface is in highs_fortran_api.f90. To include in the build, switch the Fortran CMake parameter on:","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"cmake -DFORTRAN=ON .. ","category":"page"},{"location":"interfaces.html#C#","page":"Interfaces","title":"C#","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Here are observations on calling HiGHS from C#:","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"The file highs_csharp_api.cs contains all the PInvoke you need. Copy it into your C# project.\nMake sure, that the native HiGHS library (highs.dll, libhighs.dll, libhighs.so, ... depending on your platform) can be found at runtime. How to do this is platform dependent, copying it next to your C# executable should work in most cases. You can use msbuild for that. On linux, installing HiGHS system wide should work.\nMake sure that all dependencies of the HiGHS library can be found, too. E.g. if HiGHS was build using Visual C++ make sure that the MSVCRuntime is installed on the machine you want to run your application on.\nDepending on the name of your HiGHS library, it might be necessary to change the constant \"highslibname\", see document on writing cross platform P/Invoke code if necessary.\nCall the Methods in highs_csharp_api.cs and have fun with HiGHS.","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"This is the normal way to call plain old C from C# with the great simplification that you don't have to write the PInvoke declarations yourself.","category":"page"},{"location":"interfaces.html#Modelling","page":"Interfaces","title":"Modelling","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"There are interfaces to several popular modelling languages:","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"AMPL\nHiGHS can be used via AMPL, see the AMPL Documentation.\nGAMS\nThe interface is available at GAMSlinks, including pre-build libraries.\nJuMP\nHiGHS is the default solver in JuMP, see the JuMP Documentation.","category":"page"},{"location":"interfaces.html#Other","page":"Interfaces","title":"Other","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Javascript\nHiGHS can be used from javascript directly inside a web browser thanks to highs-js. See the demo and the npm package.\nAlternatively, HiGHS also has a native Node.js interface.\nR\nAn R interface is available through the highs R package.\nRust \nHiGHS can be used from rust through the highs crate. The rust linear programming modeler good_lp supports HiGHS. ","category":"page"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Note, that some of the interfaces listed on this page are not officially supported by the HiGHS development team and are contributed by the community.","category":"page"},{"location":"executable.html","page":"Executable","title":"Executable","text":"For convenience, the executable is assumed to be bin/highs","category":"page"},{"location":"executable.html#Running-the-executable","page":"Executable","title":"Running the executable","text":"","category":"section"},{"location":"executable.html","page":"Executable","title":"Executable","text":"The model given by the MPS file model.mps is solved by the command","category":"page"},{"location":"executable.html","page":"Executable","title":"Executable","text":"  bin/highs model.mps","category":"page"},{"location":"executable.html","page":"Executable","title":"Executable","text":"If the model file is not in the folder from which the command was issued, then a path name can be given","category":"page"},{"location":"executable.html#Command-line-options","page":"Executable","title":"Command line options","text":"","category":"section"},{"location":"executable.html","page":"Executable","title":"Executable","text":"When HiGHS is run from the command line, some fundamental option values may be specified directly. Many more may be specified via a file. Formally, the usage is","category":"page"},{"location":"executable.html","page":"Executable","title":"Executable","text":"  bin/highs --help\nHiGHS options\nUsage:\n  bin/highs [OPTION...] [file]\n\n      --model_file arg          File of model to solve.\n      --read_solution_file arg  File of solution to read.\n      --options_file arg        File containing HiGHS options.\n      --presolve arg            Presolve: \"choose\" by default - \"on\"/\"off\"\n                                are alternatives.\n      --solver arg              Solver: \"choose\" by default - \"simplex\"/\"ipm\"\n                                are alternatives.\n      --parallel arg            Parallel solve: \"choose\" by default -\n                                \"on\"/\"off\" are alternatives.\n      --run_crossover arg       Run crossover: \"on\" by default -\n                                \"choose\"/\"off\" are alternatives.\n      --time_limit arg          Run time limit (seconds - double).\n      --solution_file arg       File for writing out model solution.\n      --write_model_file arg    File for writing out model.\n      --random_seed arg         Seed to initialize random number generation.\n      --ranging arg             Compute cost, bound, RHS and basic solution\n                                ranging.\n      --version                 Print version.\n  -h, --help                    Print help.","category":"page"},{"location":"executable.html","page":"Executable","title":"Executable","text":"The Options section gives a full list of options, and the format in which they are specified.","category":"page"},{"location":"cpp/examples.html","page":"Examples","title":"Examples","text":"Example programs calling HiGHS from C, C++, C#, Fortran and Python are in HiGHS/examples.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"The HiGHS library is defined in the src/Highs.h header file. It contains the definition of the methods and members of the class. ","category":"page"},{"location":"cpp/library.html#Define-model","page":"The HiGHS library","title":"Define model","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Models in HiGHS are defined as an instance of the HighsModel class. This consists of one instance of the HighsLp class, and one instance of the HighsHessian class. Communication of models to and from HiGHS is possible via instances of the HighsLp or HighsModel class. In the C and other interfaces, communication of models is via scalar values and addresses of arrays.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"In C++, the neatest way of passing a model to HiGHS is to create an instance of the HighsModel class, populate its data, and call","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::passModel(const HighsModel& model)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"or create and populate an instance of the HighsLp class, and call","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::passModel(const HighsLp& lp)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"For loading models from a file, use","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::readModel(const std::string& filename)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Below is an example of building a HighsModel","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"  // Create and populate a HighsModel instance for the LP\n  \n  // Min    f  =  x_0 +  x_1 + 3\n  // s.t.                x_1 <= 7\n  //        5 <=  x_0 + 2x_1 <= 15\n  //        6 <= 3x_0 + 2x_1\n  // 0 <= x_0 <= 4; 1 <= x_1\n  \n  // Although the first constraint could be expressed as an upper\n  // bound on x_1, it serves to illustrate a non-trivial packed\n  // column-wise matrix.\n  \n  HighsModel model;\n  model.lp_.num_col_ = 2;\n  model.lp_.num_row_ = 3;\n  model.lp_.sense_ = ObjSense::kMinimize;\n  model.lp_.offset_ = 3;\n  model.lp_.col_cost_ = {1.0, 1.0};\n  model.lp_.col_lower_ = {0.0, 1.0};\n  model.lp_.col_upper_ = {4.0, 1.0e30};\n  model.lp_.row_lower_ = {-1.0e30, 5.0, 6.0};\n  model.lp_.row_upper_ = {7.0, 15.0, 1.0e30};\n  \n  // Here the orientation of the matrix is column-wise\n  model.lp_.a_matrix_.format_ = MatrixFormat::kColwise;\n  // a_start_ has num_col_+1 entries, and the last entry is the number\n  // of nonzeros in A, allowing the number of nonzeros in the last\n  // column to be defined\n  model.lp_.a_matrix_.start_ = {0, 2, 5};\n  model.lp_.a_matrix_.index_ = {1, 2, 0, 1, 2};\n  model.lp_.a_matrix_.value_ = {1.0, 3.0, 1.0, 2.0, 2.0};","category":"page"},{"location":"cpp/library.html#Solve-model","page":"The HiGHS library","title":"Solve model","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"  // Create a Highs instance\n  Highs highs;\n  HighsStatus return_status;\n  \n  // Pass the model to HiGHS\n  return_status = highs.passModel(model);\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get a const reference to the LP data in HiGHS\n  const HighsLp& lp = highs.getLp();\n  \n  // Solve the model\n  return_status = highs.run();\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get the model status\n  const HighsModelStatus& model_status = highs.getModelStatus();\n  assert(model_status==HighsModelStatus::kOptimal);","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"Solution information:","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"  const HighsInfo& info = highs.getInfo();\n  cout << \"Simplex iteration count: \" << info.simplex_iteration_count << endl;\n  cout << \"Objective function value: \" << info.objective_function_value << endl;\n  cout << \"Primal  solution status: \" << highs.solutionStatusToString(info.primal_solution_status) << endl;\n  cout << \"Dual    solution status: \" << highs.solutionStatusToString(info.dual_solution_status) << endl;\n  cout << \"Basis: \" << highs.basisValidityToString(info.basis_validity) << endl;","category":"page"},{"location":"cpp/library.html#Integrality-variables","page":"The HiGHS library","title":"Integrality variables","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"To indicate that variables must take integer values use the HighsLp::integrality vector.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS library","title":"The HiGHS library","text":"  model.lp_.integrality_.resize(lp.num_col_);\n  for (int col=0; col < lp.num_col_; col++)\n    model.lp_.integrality_[col] = HighsVarType::kInteger;\n\n  highs.passModel(model);","category":"page"},{"location":"cpp/link.html#Using-HiGHS-from-another-CMake-Project","page":"Linking","title":"Using HiGHS from another CMake Project","text":"","category":"section"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"There are several ways the HiGHS library can be used within another C++ project. ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Firstly, make sure that HiGHS is installed locally with the correct CMake flags:","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path_to_highs_install/ ..   \ncmake --build . \ncmake --install .","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"This installs HiGHS in /path_to_highs_install/.","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Suppose another C++ CMake project has executable code in some file main.cpp, which includes Highs.h. To use the HiGHS library, edit the CMakeLists.txt as follows:","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\nset(HIGHS_DIR path_to_highs_install/lib/cmake/highs)\n\nfind_package(HIGHS REQUIRED)\nfind_package(Threads REQUIRED)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"The line ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"set(HIGHS_DIR path_to_highs_install/lib/cmake/highs)","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"adds the HiGHS installation path to HIGHS_DIR. This is equivalent to building this project with","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"cmake -DHIGHS_DIR=path_to_highs_install/lib/cmake/highs ..","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Alternatively, if you wish to include the code of HiGHS within your project, FetchContent is also available as follows: ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    highs\n    GIT_REPOSITORY \"https://github.com/ERGO-Code/HiGHS.git\"\n    GIT_TAG        \"bazel\"\n)\nset(FAST_BUILD ON CACHE INTERNAL \"Fast Build\")\n\nFetchContent_MakeAvailable(highs)\n\nadd_executable(main call_from_cpp.cc)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"If highspy is not already installed, run","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"pip install highspy","category":"page"},{"location":"python/example-py.html#Initialize-HiGHS","page":"Examples","title":"Initialize HiGHS","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"HiGHS must be initialized before making calls to the HiGHS Python library, and the examples below assume that it has been done","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"import highspy\nimport numpy as np\n\n# Highs h\nh = highspy.Highs()","category":"page"},{"location":"python/example-py.html#Load-a-model","page":"Examples","title":"Load a model","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"# Load a model from MPS file model.mps\nfilename = 'model.mps'\nh.readModel(filename)","category":"page"},{"location":"python/example-py.html#Build-a-model","page":"Examples","title":"Build a model","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"Build the model","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"minimize    f  =  x0 +  x1\nsubject to              x1 <= 7\n            5 <=  x0 + 2x1 <= 15\n            6 <= 3x0 + 2x1\n            0 <= x0 <= 4; 1 <= x1","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"Firstly, one variable at a time, via a sequence of calls to addVar and addRow.","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"# Define two variables, first using identifiers for the bound values,\n# and then using constants\nlower = 0\nupper = 4\nh.addVar(lower, upper)\nh.addVar(1, inf)\n\n# Define the objective coefficients (costs) of the two variables,\n# identifying the variable by index, and changing its cost from the\n# default value of zero\ncost = 1\nh.changeColCost(0, cost)\nh.changeColCost(1, 1)\n\n# Define constraints for the model\n#\n# The first constraint (x1<=7) has only one nonzero coefficient,\n# identified by variable index 1 and value 1\nnum_nz = 1\nindex = 1\nvalue = 1\nh.addRow(-inf, 7, num_nz, index, value)\n\n# The second constraint (5 <= x0 + 2x1 <= 15) has two nonzero\n# coefficients, so arrays of indices and values are required\nnum_nz = 2\nindex = np.array([0, 1])\nvalue = np.array([1, 2])\nh.addRow(5, 15, num_nz, index, value)\n\n# The final constraint (6 <= 3x0 + 2x1) has the same indices but\ndifferent values num_nz = 2 value = np.array([3, 2]) h.addRow(6, inf,\nnum_nz, index, value)\n\n# Access LP \nlp = h.getLp()\nnum_nz = h.getNumNz()\nprint('LP has ', lp.num_col_, ' columns', lp.num_row_, ' rows and ', num_nz, ' nonzeros')\n","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"Alternatively, via calls to addCols and addRows.","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"inf = highspy.kHighsInf\n# The constraint matrix is defined with the rows below, but parameters\n# for an empty (column-wise) matrix must be passed\ncost = np.array([1, 1], dtype=np.double)\nlower = np.array([0, 1], dtype=np.double)\nupper = np.array([4, inf], dtype=np.double)\nnum_nz = 0\nstart = 0\nindex = 0\nvalue = 0\nh.addCols(2, cost, lower, upper, num_nz, start, index, value)\n# Add the rows, with the constraint matrix row-wise\nlower = np.array([-inf, 5, 6], dtype=np.double)\nupper = np.array([7, 15, inf], dtype=np.double)\nnum_nz = 5\nstart = np.array([0, 1, 3])\nindex = np.array([1, 0, 1, 0, 1])\nvalue = np.array([1, 1, 2, 3, 2], dtype=np.double)\nh.addRows(3, lower, upper, num_nz, start, index, value)","category":"page"},{"location":"python/example-py.html#Pass-a-model","page":"Examples","title":"Pass a model","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"Pass a model from a HighsLp instance","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"inf = highspy.kHighsInf\n# Define a HighsLp instance\nlp = highspy.HighsLp()\nlp.num_col_ = 2;\nlp.num_row_ = 3;\nlp.col_cost_ = np.array([1, 1], dtype=np.double)\nlp.col_lower_ = np.array([0, 1], dtype=np.double)\nlp.col_upper_ = np.array([4, inf], dtype=np.double)\nlp.row_lower_ = np.array([-inf, 5, 6], dtype=np.double)\nlp.row_upper_ = np.array([7, 15, inf], dtype=np.double)\n# In a HighsLp instsance, the number of nonzeros is given by a fictitious final start\nlp.a_matrix_.start_ = np.array([0, 2, 5])\nlp.a_matrix_.index_ = np.array([1, 2, 0, 1, 2])\nlp.a_matrix_.value_ = np.array([1, 3, 1, 2, 2], dtype=np.double)\nh.passModel(lp)","category":"page"},{"location":"python/example-py.html#Solve-a-model","page":"Examples","title":"Solve a model","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"The incumbent model in HiGHS is solved by calling","category":"page"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"h.run()","category":"page"},{"location":"python/example-py.html#Print-solution-information","page":"Examples","title":"Print solution information","text":"","category":"section"},{"location":"python/example-py.html","page":"Examples","title":"Examples","text":"solution = h.getSolution()\nbasis = h.getBasis()\ninfo = h.getInfo()\nmodel_status = h.getModelStatus()\nprint('Model status = ', h.modelStatusToString(model_status))\nprint()\nprint('Optimal objective = ', info.objective_function_value)\nprint('Iteration count = ', info.simplex_iteration_count)\nprint('Primal solution status = ', h.solutionStatusToString(info.primal_solution_status))\nprint('Dual solution status = ', h.solutionStatusToString(info.dual_solution_status))\nprint('Basis validity = ', h.basisValidityToString(info.basis_validity))","category":"page"},{"location":"guide.html#Loading-a-model","page":"Guide","title":"Loading a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The simplest way to use HiGHS to solve a model is to load it  from a file using the method readModel. Different file formats are recognised from the filename extension. HiGHS can read plain text MPS files and (CPLEX) LP files. In general, HiGHS can read compressed files.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"Alternatively, data generated by an application can be passed to HiGHS via an instance of the HighsLp class populated by the user and passed using the method passModel. In languages where such structures cannot be used, data constituting an LP model can be passed via individual parameters.","category":"page"},{"location":"guide.html#Building-a-model","page":"Guide","title":"Building a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The model in HiGHS can be built using a sequence of calls to add variables and constraints. This is most easily done one-by-one using the methods addCol and addRow. Alterntively, addVar and addRow can be used, with changeColCost used to define each objective coefficient.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"Addition of multiple variables and constraints can be achieved using addVars and addRows, with changeColsCost used to define objective coefficients. Note that defining the model in this way requires vectors of data and the specification of constraint coefficients as compressed row-wise or column-wise matrices.","category":"page"},{"location":"guide.html#Solving-a-model","page":"Guide","title":"Solving a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The incumbent model in HiGHS is solved by a call to the method run. Where possible, HiGHS will hot start the solver using solution information obtained on previous runs, or supplied by the user.","category":"page"},{"location":"guide.html#Model-and-solution-management","page":"Guide","title":"Model and solution management","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"HiGHS has comprehensive tools for defining and extracting models. This can be done either to/from MPS or (CPLEX) format LP files, or via method calls. HiGHS also has methods that permit the incumbent model to be modified. Solutions can be supplied and extracted using either files or method calls.","category":"page"},{"location":"guide.html#Solving-a-model-2","page":"Guide","title":"Solving a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"HiGHS is used to solve a model by calling the method run. By default, HiGHS minimizes the model's objective function.","category":"page"},{"location":"guide.html#Extracting-the-results","page":"Guide","title":"Extracting the results","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"After solving a model, its status is the value returnedby the method getModelStatus. This value is of type HighsModelStatus, and may be interpreted via the names in the corresponding enum. The objective function value and iteration count are obtained using the methods getObjectiveValue and getIterationCount. The solution and basis are returned by the methods getSolution and getBasis respectively. Note that these are const references to internal data. HiGHS can also be used to write the solution to a file using the method writeSolution, with the output going to stdout if the filename is blank.","category":"page"},{"location":"guide.html#Option-values","page":"Guide","title":"Option values","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The option values that control HiGHS are of type string, bool, int and double. Options are referred to by a string identical to the name of their identifier. A full specification of the options is given here. An option value is changed by passing its name and value to the method setHighsOptionValue. This returns a HighsStatus error if the name is unrecognised or the value is illegal. The current value of an option is obtained by passing its name to the method getHighsOptionValue.","category":"page"},{"location":"guide.html#Extracting-model-data","page":"Guide","title":"Extracting model data","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The numbers of column, rows and nonzeros in the model are returned by the methods getNumCols, getNumRows and getNumEntries respectively. Data for columns and rows from the model may be extracted using the methods getCols and getRows, and specific matrix coefficients obtained using the method getCoeff.","category":"page"},{"location":"guide.html#Modifying-a-model","page":"Guide","title":"Modifying a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The most immediate model modification is to change the sense of the objective. By default, HiGHS minimizes the model's objective function. The objective sense can be set to minimize (maximize) by passing the value 1 (-1) to the method changeObjectiveSense. The cost coefficient or bounds of a column are changed by passing its index and new value(s) to the methods changeColCost, changeColBounds. The corresponding method for a row is changeRowBounds.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"For the convenience of application developers, data for multiple columns and rows can be changed in three different ways in HiGHS. This is introduced in the case of column costs. The columns can be defined by the first and last indices of the interval of columns whose costs will be changed, together with the corresponding values. When costs for a non-contiguous set of columns are changed, they may be specified as a set of indices (which need not be ordered), the number of entries in the set and the corresponding values. Alternatively, the columns to be changed (not changed) may be specified by setting values of +1 (0) in an integer mask of dimension equal to the number of columns, together with a full-length vector of values. In all three cases, the method used is called changeColsCosts. The bounds of multiple columns or rows are changed using the methods changeColsBounds or changeRowsBounds   respectively.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"An individual matrix coefficient is changed by passing its row index, column index and new value to changeCoeff.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"To add a column or row to the model, pass the necessary data to the method addCol or addRow respectively. Multiple columns and rows can be added using the methods addCols or addRows.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"Columns or rows can be deleted from the model using the methods deleteCols or deleteRows. As above, the columns or rows to be deleted may be specified as a contiguous interval, a set or via a mask. In the case of the latter, the new indices of any remaining columns or rows are returned in place of the entries of 0.","category":"page"},{"location":"guide.html#Other-operations","page":"Guide","title":"Other operations","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"To run HiGHS from a user-defined solution or basis, this is passed to HiGHS using the methods setSolution or setBasis.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"HiGHS has a suite of methods for operations with the invertible representation of the current basis matrix B. To use these requires knowledge of the corresponding (ordered) basic variables. This is obtained using the method getBasicVariables, with non-negative values being columns and negative values corresponding to row indices plus one [so -1 indicates row 0]. Methods getBasisInverseRow and getBasisInverseRow yield a specific row or column of B^-1. Methods getBasisSolve and getBasisTransposeSolve yield the solution of Bx=b and Bx=b respectively. Finally, the methods getReducedRow and getReducedColumn yield a specific row or column of B^-1A. In all cases, HiGHS can return the number and indices of the nonzeros in the result.","category":"page"},{"location":"python/notebooks.html","page":"Notebooks","title":"Notebooks","text":"As a guide to using the highspy interface there is a collection of Jupyter notebooks available at ...","category":"page"},{"location":"python/pip.html#Install","page":"Get started in Python","title":"Install","text":"","category":"section"},{"location":"python/pip.html","page":"Get started in Python","title":"Get started in Python","text":"HiGHS is available on PyPi at https://pypi.org/project/highspy/.","category":"page"},{"location":"python/pip.html","page":"Get started in Python","title":"Get started in Python","text":"If highspy is not already installed, run","category":"page"},{"location":"python/pip.html","page":"Get started in Python","title":"Get started in Python","text":"pip install highspy","category":"page"},{"location":"python/pip.html#WIP:-Methods-and-structures-to-document-by-example","page":"Get started in Python","title":"WIP: Methods and structures to document by example","text":"","category":"section"},{"location":"python/pip.html","page":"Get started in Python","title":"Get started in Python","text":"getModelStatus\nHighsModelStatus\ngetObjectiveValue\ngetIterationCount\ngetSolution\ngetBasis\nwriteSolution\nsetHighsOptionValue\ngetHighsOptionValue\ngetNumCols\ngetNumRows\ngetNumEntries\ngetCols\ngetRows\ngetCoeff\nchangeObjectiveSense\nchangeColCost\nchangeColBounds\nchangeRowBounds\nchangeColsCosts\nchangeColsBounds\nchangeRowsBounds\nchangeCoeff\naddCols\naddRows\ndeleteCols\ndeleteRows\nsetSolution\nsetBasis\ngetBasicVariables\ngetBasisInverseRow\ngetBasisInverseRow\ngetBasisSolve\ngetBasisTransposeSolve\ngetReducedRow","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"The members of the fundamental HiGHS enums are defined below. If Enum refers to a particular enum, and Member to a particular member, the members are available as follows.","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"Python: highspy.Enum.Member\nC++: Enum::Member","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"Members for internal use only are not documented.","category":"page"},{"location":"python/enums.html#HighsStatus","page":"Enums","title":"HighsStatus","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This is (part of) the return value of most HiGHS methods","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kError: The method has exposed an error\nkOk: The method has completed successfully\nkWarning: The method has recovered from an unusual event, or has terminated due to reaching a time or iteration limit","category":"page"},{"location":"python/enums.html#MatrixFormat","page":"Enums","title":"MatrixFormat","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the format of a HighsSparseMatrix","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kColwise: The matrix is stored column-wise\nkRowwise: The matrix is stored row-wise","category":"page"},{"location":"python/enums.html#ObjSense","page":"Enums","title":"ObjSense","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines optimization sense of a HighsLp","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kMinimize: The objective is to be minimized\nkMaximize: The objective is to be maximized","category":"page"},{"location":"python/enums.html#HighsVarType","page":"Enums","title":"HighsVarType","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the feasible values of a variable within a model","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kContinuous: The variable can take continuous values between its bounds\nkInteger: The variable must take integer values between its bounds\nkSemiContinuous: The variable must be zero or take continuous values between its bounds\nkSemiInteger: The variable must be zero or take integer values between its bounds","category":"page"},{"location":"python/enums.html#SolutionStatus","page":"Enums","title":"SolutionStatus","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the nature of any primal or dual solution information","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kSolutionStatusNone: There is no solution information\nkSolutionStatusInfeasible: The solution is not feasible\nkSolutionStatusFeasible: The solution is feasible","category":"page"},{"location":"python/enums.html#BasisValidity","page":"Enums","title":"BasisValidity","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the nature of any basis information","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kBasisValidityInvalid: There is no basisn information\nkBasisValidityValid: The basis information is valid","category":"page"},{"location":"python/enums.html#HighsModelStatus","page":"Enums","title":"HighsModelStatus","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the status of the model after a call to run","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kNotset: The model status has not been set\nkModelError: There is an error in the model\nkSolveError: There has been an error when solving the model\nkModelEmpty: The model is empty\nkOptimal: The model has been solved to optimality\nkInfeasible: The model is infeasible\nkUnboundedOrInfeasible: The model is unbounded or infeasible\nkUnbounded: The model is unbounded\nkObjectiveBound: The bound on the model objective value has been reached\nkObjectiveTarget: The target value for the model objective has been reached\nkTimeLimit: The run time limit has been reached\nkIterationLimit: The iteration limit has been reached\nkSolutionLimit: The MIP solver has reached the limit on the number of LPs solved\nkUnknown: The model status is unknown","category":"page"},{"location":"python/enums.html#HighsBasisStatus","page":"Enums","title":"HighsBasisStatus","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the status of a variable (or slack variable for a constraint) in a basis","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kLower: The variable is nonbasic at its lower bound (or fixed value)\nkBasic: The variable is basic\nkUpper: The variable is at its upper bound\nkZero: A free variable is nonbasic and set to zero\nkNonbasic: The variable is nonbasic","category":"page"},{"location":"python/enums.html#HighsOptionType","page":"Enums","title":"HighsOptionType","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the types of option values that control HiGHS","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kBool: The option type is boolean\nkInt: The option type is integer \nkDouble: The option type is double \nkString: The option type is string","category":"page"},{"location":"python/enums.html#HighsInfoType","page":"Enums","title":"HighsInfoType","text":"","category":"section"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"This defines the types of (scalar) information available after a call to run()","category":"page"},{"location":"python/enums.html","page":"Enums","title":"Enums","text":"kInt64: The information type is 64-bit integer \nkInt: The information type is integer \nkDouble: The information type is double ","category":"page"},{"location":"options/definitions.html#presolve","page":"Definitions","title":"presolve","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Presolve option: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions.html#solver","page":"Definitions","title":"solver","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Solver option: \"simplex\", \"choose\" or \"ipm\". If \"simplex\"/\"ipm\" is chosen then, for a MIP (QP) the integrality constraint (quadratic term) will be ignored\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions.html#parallel","page":"Definitions","title":"parallel","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Parallel option: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions.html#run_crossover","page":"Definitions","title":"run_crossover","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Run IPM crossover: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"on\"","category":"page"},{"location":"options/definitions.html#time_limit","page":"Definitions","title":"time_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Time limit (seconds)\nType: double\nRange: [0, inf]\nDefault: inf","category":"page"},{"location":"options/definitions.html#ranging","page":"Definitions","title":"ranging","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Compute cost, bound, RHS and basic solution ranging: \"off\" or \"on\"\nType: string\nDefault: \"off\"","category":"page"},{"location":"options/definitions.html#infinite_cost","page":"Definitions","title":"infinite_cost","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Limit on cost coefficient: values larger than this will be treated as infinite\nType: double\nRange: [1e+15, inf]\nDefault: 1e+20","category":"page"},{"location":"options/definitions.html#infinite_bound","page":"Definitions","title":"infinite_bound","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Limit on |constraint bound|: values larger than this will be treated as infinite\nType: double\nRange: [1e+15, inf]\nDefault: 1e+20","category":"page"},{"location":"options/definitions.html#small_matrix_value","page":"Definitions","title":"small_matrix_value","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Lower limit on |matrix entries|: values smaller than this will be treated as zero\nType: double\nRange: [1e-12, inf]\nDefault: 1e-09","category":"page"},{"location":"options/definitions.html#large_matrix_value","page":"Definitions","title":"large_matrix_value","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Upper limit on |matrix entries|: values larger than this will be treated as infinite\nType: double\nRange: [1, inf]\nDefault: 1e+15","category":"page"},{"location":"options/definitions.html#primal_feasibility_tolerance","page":"Definitions","title":"primal_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Primal feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-07","category":"page"},{"location":"options/definitions.html#dual_feasibility_tolerance","page":"Definitions","title":"dual_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Dual feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-07","category":"page"},{"location":"options/definitions.html#ipm_optimality_tolerance","page":"Definitions","title":"ipm_optimality_tolerance","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"IPM optimality tolerance\nType: double\nRange: [1e-12, inf]\nDefault: 1e-08","category":"page"},{"location":"options/definitions.html#objective_bound","page":"Definitions","title":"objective_bound","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Objective bound for termination\nType: double\nRange: [-inf, inf]\nDefault: inf","category":"page"},{"location":"options/definitions.html#objective_target","page":"Definitions","title":"objective_target","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Objective target for termination\nType: double\nRange: [-inf, inf]\nDefault: -inf","category":"page"},{"location":"options/definitions.html#random_seed","page":"Definitions","title":"random_seed","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"random seed used in HiGHS\nType: integer\nRange: {0, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions.html#threads","page":"Definitions","title":"threads","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"number of threads used by HiGHS (0: automatic)\nType: integer\nRange: {0, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions.html#highs_debug_level","page":"Definitions","title":"highs_debug_level","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Debugging level in HiGHS\nType: integer\nRange: {0, 3}\nDefault: 0","category":"page"},{"location":"options/definitions.html#highs_analysis_level","page":"Definitions","title":"highs_analysis_level","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Analysis level in HiGHS\nType: integer\nRange: {0, 63}\nDefault: 0","category":"page"},{"location":"options/definitions.html#simplex_strategy","page":"Definitions","title":"simplex_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Strategy for simplex solver 0 => Choose; 1 => Dual (serial); 2 => Dual (PAMI); 3 => Dual (SIP); 4 => Primal\nType: integer\nRange: {0, 4}\nDefault: 1","category":"page"},{"location":"options/definitions.html#simplex_scale_strategy","page":"Definitions","title":"simplex_scale_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Simplex scaling strategy: off / choose / equilibration / forced equilibration / max value 0 / max value 1 (0/1/2/3/4/5)\nType: integer\nRange: {0, 5}\nDefault: 1","category":"page"},{"location":"options/definitions.html#simplex_crash_strategy","page":"Definitions","title":"simplex_crash_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Strategy for simplex crash: off / LTSSF / Bixby (0/1/2)\nType: integer\nRange: {0, 9}\nDefault: 0","category":"page"},{"location":"options/definitions.html#simplex_dual_edge_weight_strategy","page":"Definitions","title":"simplex_dual_edge_weight_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Strategy for simplex dual edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)\nType: integer\nRange: {-1, 2}\nDefault: -1","category":"page"},{"location":"options/definitions.html#simplex_primal_edge_weight_strategy","page":"Definitions","title":"simplex_primal_edge_weight_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Strategy for simplex primal edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)\nType: integer\nRange: {-1, 2}\nDefault: -1","category":"page"},{"location":"options/definitions.html#simplex_iteration_limit","page":"Definitions","title":"simplex_iteration_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Iteration limit for simplex solver\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions.html#simplex_update_limit","page":"Definitions","title":"simplex_update_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Limit on the number of simplex UPDATE operations\nType: integer\nRange: {0, 2147483647}\nDefault: 5000","category":"page"},{"location":"options/definitions.html#simplex_min_concurrency","page":"Definitions","title":"simplex_min_concurrency","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Minimum level of concurrency in parallel simplex\nType: integer\nRange: {1, 8}\nDefault: 1","category":"page"},{"location":"options/definitions.html#simplex_max_concurrency","page":"Definitions","title":"simplex_max_concurrency","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Maximum level of concurrency in parallel simplex\nType: integer\nRange: {1, 8}\nDefault: 8","category":"page"},{"location":"options/definitions.html#output_flag","page":"Definitions","title":"output_flag","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Enables or disables solver output\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions.html#log_to_console","page":"Definitions","title":"log_to_console","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Enables or disables console logging\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions.html#solution_file","page":"Definitions","title":"solution_file","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Solution file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions.html#log_file","page":"Definitions","title":"log_file","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Log file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions.html#write_solution_to_file","page":"Definitions","title":"write_solution_to_file","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Write the primal and dual solution to a file\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#write_solution_style","page":"Definitions","title":"write_solution_style","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Style of solution file (raw = computer-readable, pretty = human-readable): -1 => HiGHS old raw (deprecated); 0 => HiGHS raw; 1 => HiGHS pretty; 2 => Glpsol raw; 3 => Glpsol pretty; 4 => HiGHS sparse raw\nType: integer\nRange: {-1, 4}\nDefault: 0","category":"page"},{"location":"options/definitions.html#glpsol_cost_row_location","page":"Definitions","title":"glpsol_cost_row_location","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Location of cost row for Glpsol file: -2 => Last; -1 => None; 0 => None if empty, otherwise data file location; 1 <= n <= numrow => Location n; n > numrow => Last\nType: integer\nRange: {-2, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions.html#icrash","page":"Definitions","title":"icrash","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Run iCrash\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#icrash_dualize","page":"Definitions","title":"icrash_dualize","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Dualise strategy for iCrash\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#icrash_strategy","page":"Definitions","title":"icrash_strategy","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Strategy for iCrash\nType: string\nDefault: \"ICA\"","category":"page"},{"location":"options/definitions.html#icrash_starting_weight","page":"Definitions","title":"icrash_starting_weight","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"iCrash starting weight\nType: double\nRange: [1e-10, 1e+50]\nDefault: 0.001","category":"page"},{"location":"options/definitions.html#icrash_iterations","page":"Definitions","title":"icrash_iterations","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"iCrash iterations\nType: integer\nRange: {0, 200}\nDefault: 30","category":"page"},{"location":"options/definitions.html#icrash_approx_iter","page":"Definitions","title":"icrash_approx_iter","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"iCrash approximate minimization iterations\nType: integer\nRange: {0, 100}\nDefault: 50","category":"page"},{"location":"options/definitions.html#icrash_exact","page":"Definitions","title":"icrash_exact","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Exact subproblem solution for iCrash\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#icrash_breakpoints","page":"Definitions","title":"icrash_breakpoints","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Exact subproblem solution for iCrash\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#write_model_file","page":"Definitions","title":"write_model_file","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Write model file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions.html#write_model_to_file","page":"Definitions","title":"write_model_to_file","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Write the model to a file\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions.html#mip_detect_symmetry","page":"Definitions","title":"mip_detect_symmetry","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Whether symmetry should be detected\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions.html#mip_max_nodes","page":"Definitions","title":"mip_max_nodes","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"MIP solver max number of nodes\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions.html#mip_max_stall_nodes","page":"Definitions","title":"mip_max_stall_nodes","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"MIP solver max number of nodes where estimate is above cutoff bound\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions.html#mip_max_leaves","page":"Definitions","title":"mip_max_leaves","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"MIP solver max number of leave nodes\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions.html#mip_max_improving_sols","page":"Definitions","title":"mip_max_improving_sols","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"limit on the number of improving solutions found to stop the MIP solver prematurely\nType: integer\nRange: {1, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions.html#mip_lp_age_limit","page":"Definitions","title":"mip_lp_age_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"maximal age of dynamic LP rows before they are removed from the LP relaxation\nType: integer\nRange: {0, 32767}\nDefault: 10","category":"page"},{"location":"options/definitions.html#mip_pool_age_limit","page":"Definitions","title":"mip_pool_age_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"maximal age of rows in the cutpool before they are deleted\nType: integer\nRange: {0, 1000}\nDefault: 30","category":"page"},{"location":"options/definitions.html#mip_pool_soft_limit","page":"Definitions","title":"mip_pool_soft_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"soft limit on the number of rows in the cutpool for dynamic age adjustment\nType: integer\nRange: {1, 2147483647}\nDefault: 10000","category":"page"},{"location":"options/definitions.html#mip_pscost_minreliable","page":"Definitions","title":"mip_pscost_minreliable","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"minimal number of observations before pseudo costs are considered reliable\nType: integer\nRange: {0, 2147483647}\nDefault: 8","category":"page"},{"location":"options/definitions.html#mip_min_cliquetable_entries_for_parallelism","page":"Definitions","title":"mip_min_cliquetable_entries_for_parallelism","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"minimal number of entries in the cliquetable before neighborhood queries of the conflict graph use parallel processing\nType: integer\nRange: {0, 2147483647}\nDefault: 100000","category":"page"},{"location":"options/definitions.html#mip_report_level","page":"Definitions","title":"mip_report_level","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"MIP solver reporting level\nType: integer\nRange: {0, 2}\nDefault: 1","category":"page"},{"location":"options/definitions.html#mip_feasibility_tolerance","page":"Definitions","title":"mip_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"MIP feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-06","category":"page"},{"location":"options/definitions.html#mip_heuristic_effort","page":"Definitions","title":"mip_heuristic_effort","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"effort spent for MIP heuristics\nType: double\nRange: [0, 1]\nDefault: 0.05","category":"page"},{"location":"options/definitions.html#mip_rel_gap","page":"Definitions","title":"mip_rel_gap","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"tolerance on relative gap, |ub-lb|/|ub|, to determine whether optimality has been reached for a MIP instance\nType: double\nRange: [0, inf]\nDefault: 0.0001","category":"page"},{"location":"options/definitions.html#mip_abs_gap","page":"Definitions","title":"mip_abs_gap","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"tolerance on absolute gap of MIP, |ub-lb|, to determine whether optimality has been reached for a MIP instance\nType: double\nRange: [0, inf]\nDefault: 1e-06","category":"page"},{"location":"options/definitions.html#ipm_iteration_limit","page":"Definitions","title":"ipm_iteration_limit","text":"","category":"section"},{"location":"options/definitions.html","page":"Definitions","title":"Definitions","text":"Iteration limit for IPM solver\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"binaries.html","page":"Binaries","title":"Binaries","text":"Precompiled binaries are available for a variety of platforms at the JuliaBinaryWrappers HiGHS repository. Each includes library files for linking to external projects, and a stand-alone executable.","category":"page"},{"location":"binaries.html","page":"Binaries","title":"Binaries","text":"Installation instructions","category":"page"},{"location":"binaries.html","page":"Binaries","title":"Binaries","text":"To install, download the appropriate file and extract the executable located at /bin/highs.","category":"page"},{"location":"binaries.html","page":"Binaries","title":"Binaries","text":"For Windows users: if in doubt, choose the file ending in x86_64-w64-mingw32-cxx11.tar.gz\nFor M1 macOS users: choose the file ending in aarch64-apple-darwin.tar.gz\nFor Intel macOS users: choose the file ending in x86_64-apple-darwin.tar.gz\nThese files link against libstdc++. If you do not have one installed, download the platform-specific libraries from the JuliaBinaryWrappers CompilerSupportLibraries repository and copy all the libraries into the same folder as the highs executable.","category":"page"},{"location":"index.html#HiGHS-High-Performance-Optimization-Software","page":"About","title":"HiGHS - High Performance Optimization Software","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"(Image: Build Status)","category":"page"},{"location":"index.html","page":"About","title":"About","text":"HiGHS is software for the definition, modification and solution of large scale sparse linear optimization models. It is freely available from GitHub under the MIT licence, and has no third-party dependencies.","category":"page"},{"location":"index.html#Specification","page":"About","title":"Specification","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"HiGHS can solve linear programming (LP) models of the form","category":"page"},{"location":"index.html","page":"About","title":"About","text":"textrmminimize qquad c^Tx qquad textrmsubject to qquad L le Ax le U qquad l le x le u","category":"page"},{"location":"index.html","page":"About","title":"About","text":"and mixed integer programming (MIP) models of the same form, for which some of the variables must take integer values. HiGHS also solves quadratic programming (QP) models, with (additional) objective term (12)x^TQx, where the Hessian matrix Q is positive semi-definite. It cannot solve QP models where some of the variables must take integer values.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"More on the terminology of optimization is available.","category":"page"},{"location":"index.html#Using-HiGHS","page":"About","title":"Using HiGHS","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"HiGHS can be used as a standalone executable on Windows, Linux and MacOS. There is also a C++11 library that can be used within a C++ project or, via its C, C#, FORTRAN, Julia and Python interfaces.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"The executable and libraries can be built from source code, or downloaded as precompiled binaries. Building HiGHS from source code requires a C++ compiler and CMake, but no other third-party utilities.","category":"page"},{"location":"index.html#Overview","page":"About","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"The standalone executable allows models to be solved from MPS files or (CPLEX) LP files, with full control of- the HiGHS run-time options, and the solution can be written to files in human and computer-readable formats.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"The HiGHS library allows models to be loaded, built and modified. It can also be used to extract solution data and perform other operations relatin to the incumbent model. The full functionality is introduced via a guide, with links to examples of its use in Python. This makes use of the C++ structures and enums, and is as close as possible to the native C++ library calls. These can be studied via the C++ header file. The C interface cannot make use of the C++ structures and enums, and can be studied via the C header file.","category":"page"},{"location":"index.html#Solvers","page":"About","title":"Solvers","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"For LPs, HiGHS has implementations of both the revised simplex and interior point methods. MIPs are solved by branch-and-price, and QPs by active set.","category":"page"},{"location":"index.html#Reference","page":"About","title":"Reference","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"If you use HiGHS in an academic context, please acknowledge this and cite the following article.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Parallelizing the dual revised simplex method Q. Huangfu and J. A. J. Hall Mathematical Programming Computation, 10 (1), 119-142, 2018. DOI: 10.1007/s12532-017-0130-5","category":"page"},{"location":"index.html#Performance","page":"About","title":"Performance","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"The performance of HiGHS relative to some commercial and open-source simplex solvers may be assessed via the Mittelmann benchmarks.","category":"page"},{"location":"index.html#Feedback","page":"About","title":"Feedback","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Your comments or specific questions on HiGHS would be greatly appreciated, so please send an email to highsopt@gmail.com to get in touch with the team.","category":"page"}]
}
