var documenterSearchIndex = {"docs":
[{"location":"cpp/options.html#Runtime-Options","page":"Options","title":"Runtime Options","text":"","category":"section"},{"location":"cpp/options.html","page":"Options","title":"Options","text":"For usage and runtime option information see ","category":"page"},{"location":"cpp/options.html","page":"Options","title":"Options","text":"./bin/highs --help","category":"page"},{"location":"cpp/options.html","page":"Options","title":"Options","text":"The printout is here.","category":"page"},{"location":"cpp/options.html#Library-Options","page":"Options","title":"Library Options","text":"","category":"section"},{"location":"cpp/options.html","page":"Options","title":"Options","text":"The class members for the latest options are defined in file src/lp_data/HighsOptions.h in ","category":"page"},{"location":"cpp/options.html","page":"Options","title":"Options","text":"struct HighsOptionsStruct","category":"page"},{"location":"cpp/get-started.html#Download-source-code","page":"Get Started in C++","title":"Download source code","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"HiGHS can be cloned from the Edinburgh Group in Research and Optimization (ERGO) GitHub repo.","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"git clone https://github.com/ERGO-Code/HiGHS.git","category":"page"},{"location":"cpp/get-started.html#Build-HiGHS-from-source-code","page":"Get Started in C++","title":"Build HiGHS from source code","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"HiGHS uses CMake as a build system. The simplest setup is to create a build folder (within the folder into which HiGHS has been downloaded) and then build HiGHS within it. The name of the build folder is arbitrary but, assuming it is HiGHS/build, the full sequence of commands required is as follows","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON ..\ncmake --build . ","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"This creates the executable build/bin/highs.","category":"page"},{"location":"cpp/get-started.html#Test-Build","page":"Get Started in C++","title":"Test Build","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"To perform a quick test to see whether the compilation was successful, run ctest from within the build folder.","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"ctest ","category":"page"},{"location":"cpp/get-started.html#Install","page":"Get Started in C++","title":"Install","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"The default installation location may need administrative permissions. To install, after building and testing, run ","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"cmake --install . ","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"To install in a specified installation directory run CMake with the CMAKE_INSTALL_PREFIX flag set: ","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"cmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path/to/highs_install ..\ncmake --build .\ncmake --install . ","category":"page"},{"location":"cpp/get-started.html#Precompiled-executables","page":"Get Started in C++","title":"Precompiled executables","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"Precompiled executables are available for a variety of platforms at the JuliaBinaryWrappers HiGHS repository.","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"Note that HiGHS is still pre-1.0, so the version numbers in the releases do not match versions of HiGHS in this repository.","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"For Windows users: if in doubt, choose the x86_64-w64-mingw32-cxx11.tar.gz file","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"For Mac users: choose the x86_64-apple-darwin.tar.gz file.","category":"page"},{"location":"cpp/get-started.html#Input-file-formats","page":"Get Started in C++","title":"Input file formats","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"HiGHS can parse .mps and .lp files. Models can also be loaded at runtime from another program using the library interface.","category":"page"},{"location":"cpp/get-started.html#Running-the-executable","page":"Get Started in C++","title":"Running the executable","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"Assuming the executable was created following the build instructions above, and the lp model is specified in model.mps (see more on LP [Input file formats])In the following discussion, the name of the executable file created in build/bin when building HiGHS is assumed to be highs. HiGHS can read plain text MPS files and LP files (but not compressed files), and the following command solves the model in model.mps","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"  /build/bin/highs /path/to/model.mps","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"For usage and runtime option information see ","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"./bin/highs --help","category":"page"},{"location":"cpp/get-started.html#Command-line-options","page":"Get Started in C++","title":"Command line options","text":"","category":"section"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"When HiGHS is run from the command line, some fundamental option values may be specified directly. Many more may be specified via a file. Formally, the usage is","category":"page"},{"location":"cpp/get-started.html","page":"Get Started in C++","title":"Get Started in C++","text":"./build/bin/highs --help\nRunning HiGHS 1.0.0\nCopyright (c) 2021 ERGO-Code under MIT licence terms\n\nHiGHS options\nUsage:\n  ./build/bin/highs [OPTION...] [file]\n\n      --model_file arg    File of model to solve.\n      --presolve arg      Presolve: \"choose\" by default - \"on\"/\"off\" are\n                          alternatives.\n      --solver arg        Solver: \"choose\" by default - \"simplex\"/\"ipm\" are\n                          alternatives.\n      --parallel arg      Parallel solve: \"choose\" by default - \"on\"/\"off\"\n                          are alternatives.\n      --time_limit arg    Run time limit (double).\n      --options_file arg  File containing HiGHS options.\n  -h, --help              Print help.","category":"page"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Any linear optimization problem will have decision variables, a linear or quadratic objective function, and linear constraints and bounds on the values of the decision variables. A mixed-integer optimization problem will require some or all of the decision variables to take integer values. The problem may require the objective function to be maximized or minimized whilst satisfying the constraints and bounds. By default, HiGHS minimizes the objective function.","category":"page"},{"location":"terminology.html#Bounds-and-the-objective-function","page":"Terminology","title":"Bounds and the objective function","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"The bounds on a decision variable are the least and greatest values that it may take, and infinite bounds can be specified. A linear objective function is given by a set of coefficients, one for each decision variable, and its value is the sum of products of coefficients and values of decision variables. The objective coefficients are often referred to as costs, and some may be zero. When a problem has been solved, the optimal values of the decision variables are referred to as the (primal) solution.","category":"page"},{"location":"terminology.html#Constraints-and-the-feasible-region","page":"Terminology","title":"Constraints and the feasible region","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Linear constraints require linear functions of decision variables to lie between bounds, and infinite bounds can be specified. If the bounds are equal, then the constraint is an equation. If the bounds are both finite, then the constraint is said to be boxed or two-sided. The set of points satisfying linear constraints and bounds is known as the feasible region. Geometrically, this is a multi-dimensional convex polyhedron, whose extreme points are referred to as vertices.","category":"page"},{"location":"terminology.html#The-constraint-matrix","page":"Terminology","title":"The constraint matrix","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"The coefficients of the linear constraints are naturally viewed as rows of a matrix. The constraint coefficients associated with a particular decision variable form a column of the constraint matrix. Hence constraints are sometimes referred to as rows, and decision variables as columns. Constraint matrix coefficients may be zero. Indeed, for large practical problems it is typical for most of the coefficients to be zero. When this property can be exploited to computational advantage, the matrix is said to be sparse. When the constraint matrix is not sparse, the solution of large problems is normally intractable computationally.","category":"page"},{"location":"terminology.html#Optimization-outcomes","page":"Terminology","title":"Optimization outcomes","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"It is possible to define a set of constraints and bounds that cannot be satisfied, in which case the problem is said to be infeasible. Conversely, it is possible that the value of the objective function can be improved without bound whilst satisfying the constraints and bounds, in which case the problem is said to be unbounded. If a problem is neither infeasible, nor unbounded, it has an optimal solution. The optimal objective function value for a linear optimization problem may be achieved at more than point, in which case the optimal solution is said to be non-unique.","category":"page"},{"location":"terminology.html#Basic-solution-of-LP-problems","page":"Terminology","title":"Basic solution of LP problems","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"An LP problem that is neither infeasible, nor unbounded, has an optimal solution at a vertex. At a vertex, the decision variables can be partitioned into as many basic variables as there are constraints, and nonbasic variables. Such a solution is known as a basic solution, and the partition referred to as a basis.","category":"page"},{"location":"terminology.html#Dual-values-for-continuous-optimization","page":"Terminology","title":"Dual values for continuous optimization","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"When none of the decision variables is required to take integer values, the problem is said to be continuous. For continuous problems, each variable and constraint has an associated dual variable. The values of the dual variables constitute the dual solution, and it is for this reason that the term primal solution is used to distinguish the optimal values of the decision variables. At the optimal solution of a continuous problem, some of the decision variables and values of constraint functions will be equal to their lower or upper bounds. Such a bound is said to be active. If a variable or constraint is at a bound, its corresponding dual solution value will generally be non-zero: when at a lower bound the dual value will be non-negative; when at an upper bound the dual value will be non-positive. When maximizing the objective the required signs of the dual values are reversed. Due to their economic interpretation, the dual values associated with constraints are often referred to as shadow prices or fair prices. Mathematically, the dual values associated with variables are often referred to as reduced costs, and the dual values associated with constraints are often referred to as Lagrange multipliers.","category":"page"},{"location":"terminology.html#Sensitivity-information-for-continuous-optimization","page":"Terminology","title":"Sensitivity information for continuous optimization","text":"","category":"section"},{"location":"terminology.html","page":"Terminology","title":"Terminology","text":"Analysis of the change in optimal objective value of a continuous linear optimization problem as the cost coefficients and bounds are changed is referred to in HiGHS as ranging. For an active bound, the corresponding dual value gives the change in the objective if that bound is increased or decreased. This level of analysis is often referred to as sensitivity. In general, the change in the objective is only known for a limited range of values for the active bound. HiGHS will return the limits of these bound ranges ranges, the objective value at both limits and the index of a variable or constraint that will acquire an active bound at both limits. For each variable with an active bound, the solution will remain optimal for a range of values of its cost coefficient. HiGHS will return the values of these cost ranges. For a variable or constraint whose value is not at a bound, HiGHS will return the range of values that the variable or constraint can take, the objective values at the limits of the range, and the index of a variable or constraint with a bound that will become in active at both limits.","category":"page"},{"location":"interfaces.html#Language-interfaces","page":"Interfaces","title":"Language interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"There are HiGHS interfaces for C, C#, FORTRAN, Julia and Python in HiGHS/interfaces, with example driver files in HiGHS/examples. ","category":"page"},{"location":"interfaces.html#Julia","page":"Interfaces","title":"Julia","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"A Julia interface is available at HiGHS.jl.","category":"page"},{"location":"interfaces.html#Rust","page":"Interfaces","title":"Rust","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"HiGHS can be used from rust through the highs crate. The rust linear programming modeler good_lp supports HiGHS. ","category":"page"},{"location":"interfaces.html#Javascript","page":"Interfaces","title":"Javascript","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"HiGHS can be used from javascript directly inside a web browser thanks to highs-js. See the demo and the npm package.","category":"page"},{"location":"interfaces.html#GAMS","page":"Interfaces","title":"GAMS","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"A GAMS interface is available at GAMSlinks, including pre-build libraries.","category":"page"},{"location":"interfaces.html#OSI","page":"Interfaces","title":"OSI","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"OSI_ROOT :\npath to COIN-OR/Osi build/install folder (OSI_ROOT/lib/pkg-config/osi.pc should exist)","category":"page"},{"location":"about.html#Specification","page":"About","title":"Specification","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS is software for definition, modification and solution of general bounded large scale sparse linear optimization problems. It can solve linear programming (LP) problems of the form","category":"page"},{"location":"about.html","page":"About","title":"About","text":"textrmmin qquad c^Tx qquad textrmsubject to qquad L le Ax le U qquad l le x le u","category":"page"},{"location":"about.html","page":"About","title":"About","text":"and mixed integer programming (MIP) problems of the same form, for which some of the variables must take integer values. HiGHS also solves quadratic programming (QP) problems, with objective term (12)x^TQx, where the Hessian matrix Q is positive semi-definite. It cannot solve QP problems where some of the variables must take integer values.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"More on the terminology of optimization is available.","category":"page"},{"location":"about.html#Solvers","page":"About","title":"Solvers","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"For LP problems, HiGHS has implementations of both the revised simplex and interior point methods. MIPs are solved by branch-and-price, and QPs by active set.","category":"page"},{"location":"about.html#Model-and-solution-management","page":"About","title":"Model and solution management","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS has comprehensive tools for defining and extracting models. This can be done either to/from MPS or (CPLEX) format LP files, or via method calls. HiGHS also has methods that permit the incumbent model to be modified. Soluitons can be supplied and extracted using either files or method calls.","category":"page"},{"location":"about.html#OS","page":"About","title":"OS","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS can be used on Windows, Linux and MacOS.","category":"page"},{"location":"about.html#Compilers","page":"About","title":"Compilers","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS can be used with the following compilers:","category":"page"},{"location":"about.html","page":"About","title":"About","text":"Clang clang\nGNU g++ \nIntel icc","category":"page"},{"location":"about.html#Dependencies","page":"About","title":"Dependencies","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"No third party sortware is required by HiGHS, except for the Threads library.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"In order to build HiGHS from source CMake 3.15 is required. For precompiled executables and libraries please contact us at highsopt@gmail.com.","category":"page"},{"location":"about.html#Reference","page":"About","title":"Reference","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"Parallelizing the dual revised simplex method Q. Huangfu and J. A. J. Hall Mathematical Programming Computation, 10 (1), 119-142, 2018. DOI: 10.1007/s12532-017-0130-5","category":"page"},{"location":"about.html#Performance","page":"About","title":"Performance","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"The performance of HiGHS relative to some commercial and open-source simplex solvers may be assessed via the Mittelmann benchmarks.","category":"page"},{"location":"cpp/examples.html","page":"Examples","title":"Examples","text":"Example programs calling HiGHS from C, C++, C#, Fortran and Python are in HiGHS/examples.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"The HiGHS library is defined in the src/Highs.h header file. It contains the definition of the methods and members of the class. ","category":"page"},{"location":"cpp/library.html#Define-model","page":"The HiGHS Library","title":"Define model","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Models in HiGHS are defined as an instance of the HighsModel class. This consists of one instance of the HighsLp class, and one instance of the HighsHessian class. Communication of models to and from HiGHS is possible via instances of the HighsLp or HighsModel class. In the C and other interfaces, communication of models is via scalar values and addresses of arrays.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"In C++, the neatest way of passing a model to HiGHS is to create an instance of the HighsModel class, populate its data, and call","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Highs::passModel(const HighsModel& model)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"or create and populate an instance of the HighsLp class, and call","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Highs::passModel(const HighsLp& lp)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"For loading problems from a file, use","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Highs::readModel(const std::string& filename)","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Below is an example of building a HighsModel","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"  // Create and populate a HighsModel instance for the LP\n  \n  // Min    f  =  x_0 +  x_1 + 3\n  // s.t.                x_1 <= 7\n  //        5 <=  x_0 + 2x_1 <= 15\n  //        6 <= 3x_0 + 2x_1\n  // 0 <= x_0 <= 4; 1 <= x_1\n  \n  // Although the first constraint could be expressed as an upper\n  // bound on x_1, it serves to illustrate a non-trivial packed\n  // column-wise matrix.\n  \n  HighsModel model;\n  model.lp_.num_col_ = 2;\n  model.lp_.num_row_ = 3;\n  model.lp_.sense_ = ObjSense::kMinimize;\n  model.lp_.offset_ = 3;\n  model.lp_.col_cost_ = {1.0, 1.0};\n  model.lp_.col_lower_ = {0.0, 1.0};\n  model.lp_.col_upper_ = {4.0, 1.0e30};\n  model.lp_.row_lower_ = {-1.0e30, 5.0, 6.0};\n  model.lp_.row_upper_ = {7.0, 15.0, 1.0e30};\n  \n  // Here the orientation of the matrix is column-wise\n  model.lp_.a_matrix_.format_ = MatrixFormat::kColwise;\n  // a_start_ has num_col_1 entries, and the last entry is the number\n  // of nonzeros in A, allowing the number of nonzeros in the last\n  // column to be defined\n  model.lp_.a_matrix_.start_ = {0, 2, 5};\n  model.lp_.a_matrix_.index_ = {1, 2, 0, 1, 2};\n  model.lp_.a_matrix_.value_ = {1.0, 3.0, 1.0, 2.0, 2.0};","category":"page"},{"location":"cpp/library.html#Solve-model","page":"The HiGHS Library","title":"Solve model","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"  // Create a Highs instance\n  Highs highs;\n  HighsStatus return_status;\n  \n  // Pass the model to HiGHS\n  return_status = highs.passModel(model);\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get a const reference to the LP data in HiGHS\n  const HighsLp& lp = highs.getLp();\n  \n  // Solve the model\n  return_status = highs.run();\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get the model status\n  const HighsModelStatus& model_status = highs.getModelStatus();\n  assert(model_status==HighsModelStatus::kOptimal);","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"Solution information:","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"  const HighsInfo& info = highs.getInfo();\n  cout << \"Simplex iteration count: \" << info.simplex_iteration_count << endl;\n  cout << \"Objective function value: \" << info.objective_function_value << endl;\n  cout << \"Primal  solution status: \" << highs.solutionStatusToString(info.primal_solution_status) << endl;\n  cout << \"Dual    solution status: \" << highs.solutionStatusToString(info.dual_solution_status) << endl;\n  cout << \"Basis: \" << highs.basisValidityToString(info.basis_validity) << endl;","category":"page"},{"location":"cpp/library.html#Integrality-variables","page":"The HiGHS Library","title":"Integrality variables","text":"","category":"section"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"To indicate that variables must take integer values use the HighsLp::integrality vector.","category":"page"},{"location":"cpp/library.html","page":"The HiGHS Library","title":"The HiGHS Library","text":"  model.lp_.integrality_.resize(lp.num_col_);\n  for (int col=0; col < lp.num_col_; col++)\n    model.lp_.integrality_[col] = HighsVarType::kInteger;\n\n  highs.passModel(model);","category":"page"},{"location":"cpp/link.html#Using-HiGHS-from-another-CMake-Project","page":"Linking","title":"Using HiGHS from another CMake Project","text":"","category":"section"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"There are several ways the HiGHS library can be used within another C++ project. ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Firstly, make sure that HiGHS is installed locally with the correct CMake flags:","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path_to_highs_install/ ..   \ncmake --build . \ncmake --install .","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"This installs HiGHS in /path_to_highs_install/.","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Suppose another C++ CMake project has executable code in some file main.cpp, which includes Highs.h. To use the HiGHS library, edit the CMakeLists.txt as follows:","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\nset(HIGHS_DIR path_to_highs_install/lib/cmake/highs)\n\nfind_package(HIGHS REQUIRED)\nfind_package(Threads REQUIRED)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"The line ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"set(HIGHS_DIR path_to_highs_install/lib/cmake/highs)","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"adds the HiGHS installation path to HIGHS_DIR. This is equivalent to building this project with","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"cmake -DHIGHS_DIR=path_to_highs_install/lib/cmake/highs ..","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"Alternatively, if you wish to include the code of HiGHS within your project, FetchContent is also available as follows: ","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    highs\n    GIT_REPOSITORY \"https://github.com/ERGO-Code/HiGHS.git\"\n    GIT_TAG        \"bazel\"\n)\nset(FAST_BUILD ON CACHE INTERNAL \"Fast Build\")\n\nFetchContent_MakeAvailable(highs)\n\nadd_executable(main call_from_cpp.cc)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"cpp/link.html#Compiling-and-linking-without-CMake","page":"Linking","title":"Compiling and linking without CMake","text":"","category":"section"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"An executable defined in the file use_highs.cpp is linked with the HiGHS library as follows. Make sure HiGHS is installed in install_folder following the installation guide. Afterwards, compile and run with","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"g++ -o use_highs use_highs.cpp -I install_folder/include/ -L install_folder/lib/ -lhighs","category":"page"},{"location":"cpp/link.html","page":"Linking","title":"Linking","text":"LD_LIBRARY_PATH=install_folder/lib/ ./use_highs","category":"page"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"If highspy is not already installed, run","category":"page"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"pip install highspy","category":"page"},{"location":"python/example-py.html#Initialize-Highs","page":"Example","title":"Initialize Highs","text":"","category":"section"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"import highspy\nimport numpy as np\n\n# Highs h\nh = highspy.Highs()","category":"page"},{"location":"python/example-py.html#Set-up-problem","page":"Example","title":"Set up problem","text":"","category":"section"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"inf = highspy.kHighsInf\nh.addVars(2, np.array([-inf, -inf]), np.array([inf, inf]))\nh.changeColsCost(2, np.array([0, 1]), np.array([0, 1], dtype=np.double))\nnum_cons = 2\nlower = np.array([2, 0], dtype=np.double)\nupper = np.array([inf, inf], dtype=np.double)\nnum_new_nz = 4\nstarts = np.array([0, 2])\nindices = np.array([0, 1, 0, 1])\nvalues = np.array([-1, 1, 1, 1], dtype=np.double)\nh.addRows(num_cons, lower, upper, num_new_nz, starts, indices, values)\n\n# Access LP \nlp = h.getLp()\nnum_nz = h.getNumNz()\nprint('LP has ', lp.num_col_, ' columns', lp.num_row_, ' rows and ', num_nz, ' nonzeros')\n","category":"page"},{"location":"python/example-py.html#Solve-problem","page":"Example","title":"Solve problem","text":"","category":"section"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"h.run()","category":"page"},{"location":"python/example-py.html#Print-solution-information","page":"Example","title":"Print solution information","text":"","category":"section"},{"location":"python/example-py.html","page":"Example","title":"Example","text":"solution = h.getSolution()\nbasis = h.getBasis()\ninfo = h.getInfo()\nmodel_status = h.getModelStatus()\nprint('Model status = ', h.modelStatusToString(model_status))\nprint()\nprint('Optimal objective = ', info.objective_function_value)\nprint('Iteration count = ', info.simplex_iteration_count)\nprint('Primal solution status = ', h.solutionStatusToString(info.primal_solution_status))\nprint('Dual solution status = ', h.solutionStatusToString(info.dual_solution_status))\nprint('Basis validity = ', h.basisValidityToString(info.basis_validity))","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The simplest way to use HiGHS to solve a model is to load a model from a file using the method readModel. Different file formats are recognised from the filename extension. HiGHS can read plain text MPS files and LP, but not compressed files. Alternatively, in C++, data generated by an application can be passed to HiGHS via an instance of the HighsLp class populated by the user and passed using the method passModel. In languages where such structures cannot be used, data constituting an LP model can be passed via individual parameters.","category":"page"},{"location":"guide.html#Solving-a-model","page":"Guide","title":"Solving a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"HiGHS is used to solve a model by calling the method run. By default, HiGHS minimizes the model's objective function.","category":"page"},{"location":"guide.html#Extracting-the-results","page":"Guide","title":"Extracting the results","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"After solving a model, its status is the value returnedby the method getModelStatus. This value is of type HighsModelStatus, and may be interpreted via the names in the corresponding enum. The objective function value and iteration count are obtained using the methods getObjectiveValue and getIterationCount. The solution and basis are returned by the methods getSolution and getBasis respectively. Note that these are const references to internal data. HiGHS can also be used to write the solution to a file using the method writeSolution, with the output going to stdout if the filename is blank.","category":"page"},{"location":"guide.html#Option-values","page":"Guide","title":"Option values","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The option values that control HiGHS are of type string, bool, int and double. Options are referred to by a string identical to the name of their identifier. A full specification of the options is given here. An option value is changed by passing its name and value to the method setHighsOptionValue. This returns a HighsStatus error if the name is unrecognised or the value is illegal. The current value of an option is obtained by passing its name to the method getHighsOptionValue.","category":"page"},{"location":"guide.html#Extracting-model-data","page":"Guide","title":"Extracting model data","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The numbers of column, rows and nonzeros in the model are returned by the methods getNumCols, getNumRows and getNumEntries respectively. Data for columns and rows from the model may be extracted using the methods getCols and getRows, and specific matrix coefficients obtained using the method getCoeff.","category":"page"},{"location":"guide.html#Modifying-a-model","page":"Guide","title":"Modifying a model","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"The most immediate model modification is to change the sense of the objective. By default, HiGHS minimizes the model's objective function. The objective sense can be set to minimize (maximize) by passing the value 1 (-1) to the method changeObjectiveSense. The cost coefficient or bounds of a column are changed by passing its index and new value(s) to the methods changeColCost, changeColBounds. The corresponding method for a row is changeRowBounds.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"For the convenience of application developers, data for multiple columns and rows can be changed in three different ways in HiGHS. This is introduced in the case of column costs. The columns can be defined by the first and last indices of the interval of columns whose costs will be changed, together with the corresponding values. When costs for a non-contiguous set of columns are changed, they may be specified as a set of indices (which need not be ordered), the number of entries in the set and the corresponding values. Alternatively, the columns to be changed (not changed) may be specified by setting values of +1 (0) in an integer mask of dimension equal to the number of columns, together with a full-length vector of values. In all three cases, the method used is called changeColsCosts. The bounds of multiple columns or rows are changed using the methods changeColsBounds or changeRowsBounds   respectively.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"An individual matrix coefficient is changed by passing its row index, column index and new value to changeCoeff.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"To add a column or row to the model, pass the necessary data to the method addCol or addRow respectively. Multiple columns and rows can be added using the methods addCols or addRows.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"Columns or rows can be deleted from the model using the methods deleteCols or deleteRows. As above, the columns or rows to be deleted may be specified as a contiguous interval, a set or via a mask. In the case of the latter, the new indices of any remaining columns or rows are returned in place of the entries of 0.","category":"page"},{"location":"guide.html#Other-operations","page":"Guide","title":"Other operations","text":"","category":"section"},{"location":"guide.html","page":"Guide","title":"Guide","text":"To run HiGHS from a user-defined solution or basis, this is passed to HiGHS using the methods setSolution or setBasis.","category":"page"},{"location":"guide.html","page":"Guide","title":"Guide","text":"HiGHS has a suite of methods for operations with the invertible representation of the current basis matrix B. To use these requires knowledge of the corresponding (ordered) basic variables. This is obtained using the method getBasicVariables, with non-negative values being columns and negative values corresponding to row indices plus one [so -1 indicates row 0]. Methods getBasisInverseRow and getBasisInverseRow yield a specific row or column of B^-1. Methods getBasisSolve and getBasisTransposeSolve yield the solution of Bx=b and Bx=b respectively. Finally, the methods getReducedRow and getReducedColumn yield a specific row or column of B^-1A. In all cases, HiGHS can return the number and indices of the nonzeros in the result.","category":"page"},{"location":"python/notebooks.html","page":"Notebooks","title":"Notebooks","text":"As a guide to using the highspy interface there is a collection of Jupyter notebooks available at ...","category":"page"},{"location":"python/pip.html#Install","page":"Get Started in Python","title":"Install","text":"","category":"section"},{"location":"python/pip.html","page":"Get Started in Python","title":"Get Started in Python","text":"HiGHS is available on PyPi at https://pypi.org/project/highspy/.","category":"page"},{"location":"python/pip.html","page":"Get Started in Python","title":"Get Started in Python","text":"If highspy is not already installed, run","category":"page"},{"location":"python/pip.html","page":"Get Started in Python","title":"Get Started in Python","text":"pip install highspy","category":"page"},{"location":"python/pip.html#Methods-and-structures-to-document-by-example","page":"Get Started in Python","title":"Methods and structures to document by example","text":"","category":"section"},{"location":"python/pip.html","page":"Get Started in Python","title":"Get Started in Python","text":"readModel\nHighsLp\npassModel\nrun\ngetModelStatus\nHighsModelStatus\ngetObjectiveValue\ngetIterationCount\ngetSolution\ngetBasis\nwriteSolution\nsetHighsOptionValue\ngetHighsOptionValue\ngetNumCols\ngetNumRows\ngetNumEntries\ngetCols\ngetRows\ngetCoeff\nchangeObjectiveSense\nchangeColCost\nchangeColBounds\nchangeRowBounds\nchangeColsCosts\nchangeColsBounds\nchangeRowsBounds\nchangeCoeff\naddCol\naddRow\naddCols\naddRows\ndeleteCols\ndeleteRows\nsetSolution\nsetBasis\ngetBasicVariables\ngetBasisInverseRow\ngetBasisInverseRow\ngetBasisSolve\ngetBasisTransposeSolve\ngetReducedRow","category":"page"},{"location":"index.html#HiGHS-High-Performance-Optimization-Software","page":"Home","title":"HiGHS - High Performance Optimization Software","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Build Status)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS is a high performance serial and parallel solver for large-scale sparse linear programming (LP), mixed-integer programming (MIP), and convex quadratic programming (QP) models developed in C++11, with interfaces to C, C#, FORTRAN, Julia and Python.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS is freely available under the MIT licence. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS can be used as a standalone executable on Windows, Linux and MacOS. There is a C++11 library which can be used within a C++ project or, via one of the interfaces, to a project written in other languages.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Installing HiGHS from source code requires CMake minimum version 3.15, but no other third-party utilities. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Your comments or specific questions on HiGHS would be greatly appreciated, so please send an email to highsopt@gmail.com to get in touch with the team.","category":"page"}]
}
