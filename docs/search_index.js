var documenterSearchIndex = {"docs":
[{"location":"man/interfaces.html#Language-interfaces","page":"Interfaces","title":"Language interfaces","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"There are HiGHS interfaces for C, C#, FORTRAN, Julia and Python in HiGHS/interfaces, with example driver files in HiGHS/examples. ","category":"page"},{"location":"man/interfaces.html#Julia","page":"Interfaces","title":"Julia","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"A Julia interface is available at HiGHS.jl.","category":"page"},{"location":"man/interfaces.html#Rust","page":"Interfaces","title":"Rust","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"HiGHS can be used from rust through the highs crate. The rust linear programming modeler good_lp supports HiGHS. ","category":"page"},{"location":"man/interfaces.html#Javascript","page":"Interfaces","title":"Javascript","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"HiGHS can be used from javascript directly inside a web browser thanks to highs-js. See the demo and the npm package.","category":"page"},{"location":"man/interfaces.html#GAMS","page":"Interfaces","title":"GAMS","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"A GAMS interface is available at GAMSlinks, including pre-build libraries.","category":"page"},{"location":"man/interfaces.html#OSI","page":"Interfaces","title":"OSI","text":"","category":"section"},{"location":"man/interfaces.html","page":"Interfaces","title":"Interfaces","text":"OSI_ROOT :\npath to COIN-OR/Osi build/install folder (OSI_ROOT/lib/pkg-config/osi.pc should exist)","category":"page"},{"location":"get-started.html#Download-source-code","page":"Get Started","title":"Download source code","text":"","category":"section"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"HiGHS can be cloned from the Edinburgh Group in Research and Optimization (ERGO) GitHub repo.","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"git clone https://github.com/ERGO-Code/HiGHS.git","category":"page"},{"location":"get-started.html#Build-HiGHS-from-source-code","page":"Get Started","title":"Build HiGHS from source code","text":"","category":"section"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"HiGHS uses CMake as a build system. The simplest setup is to create a build folder (within the folder into which HiGHS has been downloaded) and then build HiGHS within it. The name of the build folder is arbitrary but, assuming it is HiGHS/build, the full sequence of commands required is as follows","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON ..\ncmake --build . ","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"This creates the executable build/bin/highs.","category":"page"},{"location":"get-started.html#Test-Build","page":"Get Started","title":"Test Build","text":"","category":"section"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"To perform a quick test to see whether the compilation was successful, run ctest from within the build folder.","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"ctest ","category":"page"},{"location":"get-started.html#Install","page":"Get Started","title":"Install","text":"","category":"section"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"The default installation location may need administrative permissions. To install, after building and testing, run ","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"cmake --install . ","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"To install in a specified installation directory run CMake with the CMAKE_INSTALL_PREFIX flag set: ","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"cmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path/to/highs_install ..\ncmake --build .\ncmake --install . ","category":"page"},{"location":"get-started.html#Precompiled-executables","page":"Get Started","title":"Precompiled executables","text":"","category":"section"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"Precompiled executables are available for a variety of platforms at the JuliaBinaryWrappers HiGHS repository.","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"Note that HiGHS is still pre-1.0, so the version numbers in the releases do not match versions of HiGHS in this repository.","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"For Windows users: if in doubt, choose the x86_64-w64-mingw32-cxx11.tar.gz file","category":"page"},{"location":"get-started.html","page":"Get Started","title":"Get Started","text":"For Mac users: choose the x86_64-apple-darwin.tar.gz file.","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"There are several ways the HiGHS library can be used within another C++ project. ","category":"page"},{"location":"man/link.html#Use-HiGHS-from-another-CMake-Project","page":"Linking","title":"Use HiGHS from another CMake Project","text":"","category":"section"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"Make sure HiGHS is installed locally with the correct CMake flags:","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path_to_highs_install/ -DCMAKE_TARGETS=ON ..   \ncmake --build . \ncmake --install .","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"This installs HiGHS in /path_to_highs_install/.","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"Suppose another C++ CMake project has executable code in some file main.cpp, which includes Highs.h. To use the HiGHS library, edit the CMakeLists.txt as follows:","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\nset(HIGHS_DIR path_to_highs_install/lib/cmake/highs)\n\nfind_package(HIGHS REQUIRED)\nfind_package(Threads)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main libhighs)","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"The line ","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"set(HIGHS_DIR path_to_highs_install/lib/cmake/highs)","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"adds the HiGHS installation path to HIGHS_DIR. This is equivalent to building this project with","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"cmake -DHIGHS_DIR=path_to_highs_install/lib/cmake/highs ..","category":"page"},{"location":"man/link.html#Compiling-and-linking-without-CMake","page":"Linking","title":"Compiling and linking without CMake","text":"","category":"section"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"An executable defined in the file use_highs.cpp is linked with the HiGHS library as follows. Make sure HiGHS is installed in install_folder following the installation guide. Afterwards, compile and run with","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"g++ -o use_highs use_highs.cpp -I install_folder/include/ -L install_folder/lib/ -lhighs","category":"page"},{"location":"man/link.html","page":"Linking","title":"Linking","text":"LD_LIBRARY_PATH=install_folder/lib/ ./use_highs","category":"page"},{"location":"about.html#Specification","page":"About","title":"Specification","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS solves large scale sparse linear programming (LP) problems of the form","category":"page"},{"location":"about.html","page":"About","title":"About","text":"textrmmin qquad c^Tx qquad textrmsubject to qquad L = Ax = U qquad l = x = u","category":"page"},{"location":"about.html","page":"About","title":"About","text":"The HiGHS core solver implementes the dual revised simplex method in parallel C++. An interior point solver is available as an optional feature.","category":"page"},{"location":"about.html#OS","page":"About","title":"OS","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS can be used on Windows, Linux and MacOS.","category":"page"},{"location":"about.html#Compilers","page":"About","title":"Compilers","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"HiGHS can be used with the following compilers:","category":"page"},{"location":"about.html","page":"About","title":"About","text":"Clang clang\nGNU g++ \nIntel icc","category":"page"},{"location":"about.html#Dependencies","page":"About","title":"Dependencies","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"No third party sortware is required by HiGHS, except for the Threads library.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"In order to build HiGHS from source CMake 3.15 is required. For precompiled executables and libraries please contact us at highsopt@gmail.com.","category":"page"},{"location":"about.html#Reference","page":"About","title":"Reference","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"Parallelizing the dual revised simplex method Q. Huangfu and J. A. J. Hall Mathematical Programming Computation, 10 (1), 119-142, 2018. DOI: 10.1007/s12532-017-0130-5","category":"page"},{"location":"about.html#Performance","page":"About","title":"Performance","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"The performance of HiGHS relative to some commercial and open-source simplex solvers may be assessed via the Mittelmann benchmarks.","category":"page"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"In this guide are outlined basic operations with the HiGHS Library:","category":"page"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"Loading a model\nSolving a model\nRetrieving solution information","category":"page"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"HiGHS can be used to modify the current model and re-solve it efficiently. ","category":"page"},{"location":"man/guide.html#Loading-a-model","page":"Model operations","title":"Loading a model","text":"","category":"section"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"from data file (.lp, .mps)\nvia data provided by another application","category":"page"},{"location":"man/guide.html#Solving-a-model","page":"Model operations","title":"Solving a model","text":"","category":"section"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"LP Revised dual Simplex \nLP Interior point \nMIP branch-and-bound ","category":"page"},{"location":"man/guide.html#Solution","page":"Model operations","title":"Solution","text":"","category":"section"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"Write to file \nLoad directly","category":"page"},{"location":"man/guide.html#Model-modifications","page":"Model operations","title":"Model modifications","text":"","category":"section"},{"location":"man/guide.html","page":"Model operations","title":"Model operations","text":"add ","category":"page"},{"location":"man/options.html#Runtime-Options","page":"Options","title":"Runtime Options","text":"","category":"section"},{"location":"man/options.html","page":"Options","title":"Options","text":"For usage and runtime option information see ","category":"page"},{"location":"man/options.html","page":"Options","title":"Options","text":"./bin/highs --help","category":"page"},{"location":"man/options.html#Library-Options","page":"Options","title":"Library Options","text":"","category":"section"},{"location":"man/options.html","page":"Options","title":"Options","text":"The class members for the latest options are defined in file HighsOptions.h in ","category":"page"},{"location":"man/options.html","page":"Options","title":"Options","text":"struct HighsOptionsStruct","category":"page"},{"location":"man/examples.html","page":"Examples","title":"Examples","text":"Example programs calling HiGHS from C, C#, FORTRAN, Julia and Python are in HiGHS/examples.","category":"page"},{"location":"index.html#HiGHS-High-Performance-Optimization-Software","page":"Home","title":"HiGHS - High Performance Optimization Software","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Build Status)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS is a high performance serial and parallel solver for large-scale sparse linear programming (LP) and mixed-integer programming (MIP) models developed in C++11, with interfaces to C, C#, FORTRAN, Julia and Python.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS is freely available under the MIT licence. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HiGHS can be used as a standalone executable on Windows, Linux and MacOS. There is a C++11 library which can be used within a C++ project or, via one of the interfaces, to a project written in other languages.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Installing HiGHS from source code requires CMake minimum version 3.15, but no other third-party utilities. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Your comments or specific questions on HiGHS would be greatly appreciated, so please send an email to  highsopt@gmail.com to get in touch with the team.","category":"page"},{"location":"index.html#LP-and-MIP","page":"Home","title":"LP and MIP","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Linear programming problems (LP) in general bounded form are defined as","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"textrmmin qquad c^Tx qquad textrmsubject to qquad L = Ax = U qquad l = x = u","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"and mixed integer programming (MIP) problems of the same form, for which some of the variables must take integer values. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"More on the theory background can be found at www.highs.dev. ","category":"page"},{"location":"run-executable.html#Input-file-formats","page":"Running the executable","title":"Input file formats","text":"","category":"section"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"HiGHS can parse .mps and .lp files. Models can also be loaded at runtime from another program using the library interface.","category":"page"},{"location":"run-executable.html#Running-the-executable","page":"Running the executable","title":"Running the executable","text":"","category":"section"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"Assuming the executable was created following the build instructions, and the lp model is specified in model.mps (see more on LP [Input file formats])In the following discussion, the name of the executable file created in build/bin when building HiGHS is assumed to be highs. HiGHS can read plain text MPS files and LP files (but not compressed files), and the following command solves the model in model.mps","category":"page"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"  /build/bin/highs /path/to/model.mps","category":"page"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"For usage and runtime option information see ","category":"page"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"./bin/highs --help","category":"page"},{"location":"run-executable.html#Command-line-options","page":"Running the executable","title":"Command line options","text":"","category":"section"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"When HiGHS is run from the command line, some fundamental option values may be specified directly. Many more may be specified via a file. Formally, the usage is","category":"page"},{"location":"run-executable.html","page":"Running the executable","title":"Running the executable","text":"./build/bin/highs --help\nRunning HiGHS 1.0.0\nCopyright (c) 2021 ERGO-Code under MIT licence terms\n\nHiGHS options\nUsage:\n  ./build/bin/highs [OPTION...] [file]\n\n      --model_file arg    File of model to solve.\n      --presolve arg      Presolve: \"choose\" by default - \"on\"/\"off\" are\n                          alternatives.\n      --solver arg        Solver: \"choose\" by default - \"simplex\"/\"ipm\" are\n                          alternatives.\n      --parallel arg      Parallel solve: \"choose\" by default - \"on\"/\"off\"\n                          are alternatives.\n      --time_limit arg    Run time limit (double).\n      --options_file arg  File containing HiGHS options.\n  -h, --help              Print help.","category":"page"}]
}
